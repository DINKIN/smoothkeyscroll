// Generated by CoffeeScript 1.3.3
(function() {
  var currentFrame, currentSpeed, isMovingAny, move, moving, oposite, processKeyEvent, shouldScroll, speeds, startMoving, stopMoving, _ref, _ref1;

  if ((_ref = window.requestAnimationFrame) == null) {
    window.requestAnimationFrame = window.webkitRequestAnimationFrame;
  }

  if ((_ref1 = window.cancelAnimationFrame) == null) {
    window.cancelAnimationFrame = window.webkitCancelAnimationFrame;
  }

  speeds = {
    Normal: 5,
    Control: 1,
    Alt: 20,
    Meta: 0
  };

  currentSpeed = 'Normal';

  if (chrome.storage) {
    chrome.storage.local.get(null, function(options) {
      var option, value, _results;
      _results = [];
      for (option in options) {
        value = options[option];
        _results.push(speeds[option] = parseInt(value));
      }
      return _results;
    });
    chrome.storage.onChanged.addListener(function(options) {
      var option, value, _results;
      _results = [];
      for (option in options) {
        value = options[option];
        _results.push(speeds[option] = parseInt(value.newValue));
      }
      return _results;
    });
  } else {
    window.SmoothKeyScrollSpeeds = speeds;
  }

  oposite = {
    Up: 'Down',
    Down: 'Up',
    Left: 'Right',
    Right: 'Left'
  };

  moving = {
    Up: false,
    Down: false,
    Left: false,
    Right: false
  };

  currentFrame = null;

  processKeyEvent = function(event) {
    var direction, keyState;
    keyState = event.type === 'keydown' ? true : false;
    switch (event.keyIdentifier) {
      case 'Up':
      case 'Down':
      case 'Left':
      case 'Right':
        if (shouldScroll(event)) {
          direction = event.keyIdentifier;
          if (!moving[direction] && keyState === true) {
            return startMoving(direction);
          } else if (keyState === false) {
            return stopMoving(direction);
          }
        }
        break;
      case 'Control':
      case 'Alt':
      case 'Meta':
        return currentSpeed = keyState === true ? event.keyIdentifier : 'Normal';
    }
  };

  shouldScroll = function(event) {
    if (event.target.isContentEditable) {
      return false;
    }
    if (event.target.type === 'application/x-shockwave-flash') {
      return false;
    }
    if (event.defaultPrevented) {
      return false;
    }
    if (/input|textarea|select|embed/i.test(event.target.nodeName)) {
      return false;
    }
    if (currentSpeed === 'Meta') {
      return false;
    }
    event.preventDefault();
    return true;
  };

  isMovingAny = function() {
    return moving.Up || moving.Down || moving.Left || moving.Right;
  };

  startMoving = function(direction) {
    moving[direction] = true;
    moving[oposite[direction]] = false;
    return currentFrame != null ? currentFrame : currentFrame = requestAnimationFrame(move);
  };

  stopMoving = function(direction) {
    moving[direction] = false;
    if (!isMovingAny()) {
      return currentFrame = cancelAnimationFrame(currentFrame);
    }
  };

  move = function() {
    var amount, x, y;
    currentFrame = requestAnimationFrame(move);
    amount = speeds[currentSpeed];
    y = moving.Down ? amount : moving.Up ? -amount : void 0;
    x = moving.Right ? amount : moving.Left ? -amount : void 0;
    if (x || y) {
      return window.scrollBy(x, y);
    }
  };

  window.addEventListener('keydown', processKeyEvent, false);

  window.addEventListener('keyup', processKeyEvent, false);

  window.onblur = function() {
    stopMoving('Up');
    stopMoving('Down');
    stopMoving('Left');
    stopMoving('Right');
    return currentSpeed = 'Normal';
  };

}).call(this);
